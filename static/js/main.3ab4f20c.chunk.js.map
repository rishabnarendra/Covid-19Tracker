{"version":3,"sources":["components/Cards/Cards.module.css","api/index.js","components/Cards/Cards.jsx","components/Country/Country.jsx","components/PieChart/PieChart.jsx","App.js","serviceWorker.js","index.js","components/Country/Country.module.css"],"names":["module","exports","url","fetchData","country","a","urlForSpecificCountry","axios","get","data","confirmed","recovered","deaths","lastUpdate","fetchCountryList","countries","map","name","Cards","className","styles","container","Grid","spacing","justify","item","xs","md","component","Card","cx","card","CardContent","Typography","color","variant","start","end","value","duration","separator","Country","updateCountry","useState","setCountries","useEffect","fetchAPI","NativeSelect","nativeSelect","onChange","e","target","i","key","PieChart","displayData","labels","datasets","backgroundColor","width","height","options","maintainAspectRatio","App","state","setState","this","Date","toDateString","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3ab4f20c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2pno1\",\"card\":\"Cards_card__2KHIt\",\"confirmed\":\"Cards_confirmed__3dBBs\",\"recovered\":\"Cards_recovered__21Wm1\",\"deaths\":\"Cards_deaths__geGdL\"};","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n  let urlForSpecificCountry = url;\r\n\r\n  if (country) {\r\n    urlForSpecificCountry = `${url}/countries/${country}`;\r\n  }\r\n\r\n  try {\r\n    const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(urlForSpecificCountry);\r\n    return { confirmed, recovered, deaths, lastUpdate };\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const fetchCountryList = async () => {\r\n  try {\r\n    const { data: { countries } } = await axios.get(`${url}/countries`);\r\n    return countries.map((country) => country.name);\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\nimport styles from './Cards.module.css';\r\n\r\nconst Cards = ( { data: {confirmed, recovered, deaths } } ) => {\r\n\r\n    // We can just check for confirmed. If this value isn't loaded then nothing else is\r\n    if (!confirmed) {\r\n        return ' ';\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={styles.container}>\r\n                <Grid container spacing={2} justify=\"center\">\r\n                    <Grid item xs={5} md={2} component={Card} className={cx(styles.card, styles.confirmed)}>\r\n                        <CardContent>\r\n                            <Typography color=\"textSecondary\">Confirmed</Typography>\r\n                            <Typography variant=\"h5\" component=\"h2\">\r\n                                <CountUp start={0} end={confirmed.value} duration={3.00} separator=\",\" />\r\n                            </Typography>\r\n                        </CardContent>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={5} md={2} component={Card} className={cx(styles.card, styles.recovered)}>\r\n                        <CardContent>\r\n                            <Typography color=\"textSecondary\">Recovered</Typography>\r\n                            <Typography variant=\"h5\" component=\"h2\">\r\n                                <CountUp start={0} end={recovered.value} duration={3.00} separator=\",\" />\r\n                            </Typography>\r\n                        </CardContent>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={5} md={2} component={Card} className={cx(styles.card, styles.deaths)}>\r\n                        <CardContent>\r\n                            <Typography color=\"textSecondary\">Deaths</Typography>\r\n                            <Typography variant=\"h5\" component=\"h2\">\r\n                                <CountUp start={0} end={deaths.value} duration={3.00} separator=\",\" />\r\n                            </Typography>\r\n                        </CardContent>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cards","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect } from '@material-ui/core';\r\nimport { fetchCountryList } from '../../api';\r\nimport styles from './Country.module.css';\r\n\r\nconst Country = ({ updateCountry }) => {\r\n  const [countries, setCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setCountries(await fetchCountryList());\r\n    };\r\n\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  return (\r\n      <NativeSelect className = {styles.nativeSelect} onChange={(e) => updateCountry(e.target.value)}>\r\n        <option>Global</option>\r\n        {countries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n      </NativeSelect>\r\n  );\r\n};\r\n\r\nexport default Country;","import React from 'react';\r\nimport Pie from 'react-chartjs-2';\r\nimport { fetchData } from '../../api';\r\n\r\nconst PieChart = ( { data: {confirmed, recovered, deaths }, country } ) => {\r\n\r\n    // We can just check for confirmed. If this value isn't loaded then nothing else is\r\n    if (!confirmed) {\r\n        return ' ';\r\n    }\r\n\r\n    const displayData = {\r\n        labels: [\r\n            'Active Cases',\r\n            'Recovered',\r\n            'Deaths'\r\n        ],\r\n        datasets: [{\r\n            data: [\r\n                confirmed.value - recovered.value - deaths.value, \r\n                recovered.value, \r\n                deaths.value\r\n            ],\r\n            backgroundColor: [\r\n            'rgba(0, 0, 255, 0.5)',\r\n            'rgba(0, 255, 0, 0.5)',\r\n            'rgba(255, 0, 0, 0.5)'\r\n            ]\r\n        }]\r\n    };\r\n\r\n    return(\r\n        <div>\r\n            <Pie data={displayData} width = {300} height = {300} options={{ maintainAspectRatio: false }}/>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default PieChart","import React from 'react';\nimport './App.css';\nimport {fetchData} from './api';\nimport { Cards, Country, PieChart } from './components';\n\nclass App extends React.Component {\n  \n  state = {\n    data: {},\n    country: '',\n  }\n\n  async componentDidMount() {\n    const data = await fetchData();\n    this.setState({ data });\n  }\n\n  updateCountry = async (country) => {\n    if(country !== \"Global\") {\n      const data = await fetchData(country);\n      this.setState({ data, country: country });\n    }\n    else {\n      const data = await fetchData(); \n      this.setState({ data, country: country });\n    }\n  }\n\n  render() {\n    const { data } = this.state;\n\n    return (\n      <div>\n        <Cards data = { data } />\n        <div className=\"date\">Data Last Updated: {new Date(data.lastUpdate).toDateString()}</div>\n        <Country updateCountry = { this.updateCountry } />\n        <br /><br /><br /><br />\n        <PieChart data = { data } />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nativeSelect\":\"Country_nativeSelect__3mJSs\"};"],"sourceRoot":""}